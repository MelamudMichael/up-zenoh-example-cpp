name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: ["**"]
  workflow_call:
  workflow_dispatch:
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"


      - name: Create default Conan profile
        run: conan profile detect

      - name: Install Rust toolchain
        run: rustup component add rustfmt clippy

      - name: Build and install Zenoh-C
        shell: bash
        run: |
          git clone https://github.com/eclipse-zenoh/zenoh-c.git
          cd zenoh-c && mkdir -p build && cd build 
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/local -DZENOHC_INSTALL_STATIC_LIBRARY=TRUE
          cmake --build . --target install --config Release -- -j
          
      - name: build evertyhing 
        shell: bash
        run: |
          export CMAKE_PREFIX_PATH="$HOME/local"
          export CMAKE_ZENOH_INCLUDE_PATH="$HOME/local/include"
          export GITHUB_CICD_ZENOH_PATH="$HOME/local/lib/libzenohc.a"
          export CMAKE_ZENOH_INCLUDE_PATH="$HOME/local/include"
          git clone https://github.com/eclipse-uprotocol/up-cpp.git
          git clone https://github.com/eclipse-uprotocol/up-client-zenoh-cpp.git
          git clone https://github.com/eclipse-uprotocol/up-zenoh-example-cpp.git
          cd up-cpp
          git submodule update --init --recursive
          cd ../
          echo -e "cmake_minimum_required(VERSION 3.20.0)\nproject(ultifi)\n\nadd_subdirectory(up-cpp)\nadd_subdirectory(up-client-zenoh-cpp)\nadd_subdirectory(up-zenoh-example-cpp)" > CMakeLists.txt
          mkdir build
          cd build
          conan install ../up-client-zenoh-cpp -o build_unbundled=False
          ls .
          cmake ../ -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$HOME/local/lib/"
          cmake --build .
  
  
  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
